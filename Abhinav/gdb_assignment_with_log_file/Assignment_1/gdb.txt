/* 
* Assignment_1.cpp
Issues found were: 
    1. Sorting is improper, the first element is being left while sorting.
    2. Iterator is decalred but not used, so removed it.
*/

/*
MOdified Code
/*
Program usage: sort the array of numbers based on it frequency in descending order
For the array input {6,5,7,5,5,6}, 
Expected output:
5 3
6 2
7 1
*/
#include <iostream>
#include <vector>
#include <utility>
#include <algorithm>
using namespace std;

bool comparecount(pair<long,long> a, pair<long,long> b) {
    return a.second > b.second;
}

vector<pair<long, long>> sortWithFrequency(vector<long> v1){
    
    vector<pair<long, long>> v2;
    int i = 0;
    
    sort(v1.begin(), v1.end());

    while (i < v1.size()) {
        pair<long,long> p;
        if (v2.size() == 0) {
            p.first = v1[i];
            p.second = count(v1.begin(), v1.end(), v1[i]);
            v2.push_back(p);
            i++;
            continue;
        } else if (v2[v2.size()-1].first != v1[i]) {
            p.first = v1[i];
            p.second = count(v1.begin(), v1.end(), v1[i]);
            v2.push_back(p);
            i++;
            continue;
        }
        i++;
    }
    sort(v2.begin(), v2.end(),  comparecount);
    return v2;
}

int main() {
    long a[] = {1,1,6,5,7,5,5,6};
    vector<long> v1(a,a+8);
    vector<pair<long, long>> v2 = sortWithFrequency(v1);
    
    for (int i =0; i != v2.size(); i++) {
        cout << v2[i].first << " " << v2[i].second << std::endl;
    }
    return 0;
}

*/

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



Breakpoint 1 at 0x1400016ac: file Assignment_1.cpp, line 48.
Breakpoint 2 at 0x14000147d: file Assignment_1.cpp, line 21.
Starting program: D:\Multicoreware\gdb_assignment_gets2025\Assignment_1\ass1.exe 
[New Thread 10796.0x394c]
[New Thread 10796.0x3db0]
[New Thread 10796.0xd50]

Thread 1 hit Breakpoint 1, main () at Assignment_1.cpp:48
48	    long a[] = {6,5,7,5,5,6};
49	    vector<long> v1(a,a+6);
50	    vector<pair<long, long>> v2 = sortWithFrequency(v1);
$1 = std::vector of length 6, capacity 6 = {6, 5, 7, 5, 5, 6}

Thread 1 hit Breakpoint 2, sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:21
21	    vector<pair<long, long>> v2;
22	    int i = 0;
24	    sort(v1.begin()+1, v1.end());
26	    while (i < v1.size()) {
$2 = std::vector of length 6, capacity 6 = {6, 5, 5, 5, 6, 7}
Hardware watchpoint 3: i
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
29	            p.first = v1[i];
30	            p.second = count(v1.begin(), v1.end(), v1[i]);
31	            v2.push_back(p);
32	            i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 0
New value = 1
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:33
33	            continue;
$3 = std::vector of length 1, capacity 1 = {{first = 6, second = 2}}
26	    while (i < v1.size()) {
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
34	        } else if (v2[v2.size()-1].first != v1[i]) {
35	            p.first = v1[i];
36	            p.second = count(v1.begin(), v1.end(), v1[i]);
37	            v2.push_back(p);
38	            i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 1
New value = 2
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:39
39	            continue;
$4 = std::vector of length 2, capacity 2 = {{first = 6, second = 2}, {first = 5, second = 3}}
26	    while (i < v1.size()) {
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
34	        } else if (v2[v2.size()-1].first != v1[i]) {
41	        i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 2
New value = 3
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:26
26	    while (i < v1.size()) {
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
34	        } else if (v2[v2.size()-1].first != v1[i]) {
41	        i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 3
New value = 4
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:26
26	    while (i < v1.size()) {
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
34	        } else if (v2[v2.size()-1].first != v1[i]) {
35	            p.first = v1[i];
36	            p.second = count(v1.begin(), v1.end(), v1[i]);
37	            v2.push_back(p);
38	            i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 4
New value = 5
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:39
39	            continue;
$5 = std::vector of length 3, capacity 4 = {{first = 6, second = 2}, {first = 5, second = 3}, {first = 6, second = 2}}
26	    while (i < v1.size()) {
27	        pair<long,long> p;
28	        if (v2.size() == 0) {
34	        } else if (v2[v2.size()-1].first != v1[i]) {
35	            p.first = v1[i];
36	            p.second = count(v1.begin(), v1.end(), v1[i]);
37	            v2.push_back(p);
38	            i++;

Thread 1 hit Hardware watchpoint 3: i

Old value = 5
New value = 6
sortWithFrequency (v1=std::vector of length 6, capacity 6 = {...}) at Assignment_1.cpp:39
39	            continue;
$6 = std::vector of length 4, capacity 4 = {{first = 6, second = 2}, {first = 5, second = 3}, {first = 6, second = 2}, {first = 7, second = 1}}
26	    while (i < v1.size()) {
43	    sort(v2.begin()+1, v2.end(),  comparecount);
44	    return v2;
$7 = std::vector of length 4, capacity 4 = {{first = 6, second = 2}, {first = 5, second = 3}, {first = 6, second = 2}, {first = 7, second = 1}}
Watchpoint 3 deleted because the program has left the block
in which its expression is valid.
main () at Assignment_1.cpp:51
51	    vector<pair<long, long>>::iterator it = v2.begin();
52	    for (int i =0; i != v2.size(); i++) {
$8 = {first = 6, second = 2}
53	        cout << v2[i].first << " " << v2[i].second << std::endl;
52	    for (int i =0; i != v2.size(); i++) {
53	        cout << v2[i].first << " " << v2[i].second << std::endl;
52	    for (int i =0; i != v2.size(); i++) {
53	        cout << v2[i].first << " " << v2[i].second << std::endl;
52	    for (int i =0; i != v2.size(); i++) {
53	        cout << v2[i].first << " " << v2[i].second << std::endl;
52	    for (int i =0; i != v2.size(); i++) {
55	    return 0;
56	}

