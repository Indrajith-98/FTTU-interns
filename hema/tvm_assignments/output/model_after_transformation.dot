(def @main(%input {virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(id=1dcb8870, kind='llvm', keys={'cpu'}, attrs={'mtriple': "x86_64-pc-linux-gnu"}, host=Target(id=1e61a240, kind='llvm', keys={'cpu'}, attrs={'mtriple': "x86_64-pc-linux-gnu"})))}: Tensor[(1, 784), float32] /* ty=Tensor[(1, 784), float32] span=/fc1/Gemm.input:0:0 */, hash="89f79aa70ea71883", virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(id=1dcb8870, kind='llvm', keys={'cpu'}, attrs={'mtriple': "x86_64-pc-linux-gnu"}, host=Target(id=1e61a240, kind='llvm', keys={'cpu'}, attrs={'mtriple': "x86_64-pc-linux-gnu"})))) -> Tensor[(1, 10), float32] {
  %3 = fn (%p01: Tensor[(1, 784), float32] /* ty=Tensor[(1, 784), float32] */, %p11: Tensor[(256, 784), float32] /* ty=Tensor[(256, 784), float32] */, %p21: Tensor[(256), float32] /* ty=Tensor[(256), float32] */, Primitive=1, hash="ebc323ee2caa0769") -> Tensor[(1, 256), float32] {
    %1 = nn.dense(%p01, %p11, units=256) /* ty=Tensor[(1, 256), float32] */;
    %2 = add(%1, %p21) /* ty=Tensor[(1, 256), float32] */;
    nn.relu(%2) /* ty=Tensor[(1, 256), float32] */
  } /* ty=fn (Tensor[(1, 784), float32], Tensor[(256, 784), float32], Tensor[(256), float32]) -> Tensor[(1, 256), float32] */;
  %4 = %3(%input, meta[relay.Constant][0] /* ty=Tensor[(256, 784), float32] span=/fc1/Gemm.fc1.weight:0:0 */, meta[relay.Constant][1] /* ty=Tensor[(256), float32] span=/fc1/Gemm.fc1.bias:0:0 */) /* ty=Tensor[(1, 256), float32] */;
  %5 = fn (%p0: Tensor[(1, 256), float32] /* ty=Tensor[(1, 256), float32] */, %p1: Tensor[(10, 256), float32] /* ty=Tensor[(10, 256), float32] */, %p2: Tensor[(10), float32] /* ty=Tensor[(10), float32] */, Primitive=1, hash="382bb2b64dd2c3bf") -> Tensor[(1, 10), float32] {
    %0 = nn.dense(%p0, %p1, units=10) /* ty=Tensor[(1, 10), float32] */;
    add(%0, %p2) /* ty=Tensor[(1, 10), float32] */
  } /* ty=fn (Tensor[(1, 256), float32], Tensor[(10, 256), float32], Tensor[(10), float32]) -> Tensor[(1, 10), float32] */;
  %5(%4, meta[relay.Constant][2] /* ty=Tensor[(10, 256), float32] span=/fc2/Gemm.fc2.weight:0:0 */, meta[relay.Constant][3] /* ty=Tensor[(10), float32] span=/fc2/Gemm.fc2.bias:0:0 */) /* ty=Tensor[(1, 10), float32] */
}

, {})