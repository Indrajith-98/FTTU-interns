        -:    0:Source:D:/GTESTASS/src/my_math.cpp
        -:    0:Graph:my_math.cpp.gcno
        -:    0:Data:my_math.cpp.gcda
        -:    0:Runs:2
        -:    1:#include "my_math.h"
        -:    2:#include <cmath>
        -:    3:
       84:    4:int MyMath::factorial(int n) {
       84:    5:  if (n < 0) {
        4:    6:    throw std::invalid_argument("Factorial is not defined for negative numbers.");
        -:    7:  }
       80:    8:  if (n == 0) {
       14:    9:    return 1;
        -:   10:  } else {
       66:   11:    return n * factorial(n - 1);
        -:   12:  }
        -:   13:}
        -:   14:
   312964:   15:int MyMath::fibonacci(int n) {
   312964:   16:  if (n < 0) {
        4:   17:    throw std::invalid_argument("Fibonacci is not defined for negative numbers.");
        -:   18:  }
   312960:   19:  if (n <= 1) {
   156488:   20:    return n;
        -:   21:  } else {
   156472:   22:    return fibonacci(n - 1) + fibonacci(n - 2);
        -:   23:  }
        -:   24:}
        -:   25:
      104:   26:int MyMath::gcd(int a, int b) {
      104:   27:  if (a < 0 || b < 0) {
        6:   28:    throw std::invalid_argument("GCD is not defined for negative numbers.");
        -:   29:  }
       98:   30:  if (b == 0) {
       32:   31:    return a;
        -:   32:  } else {
       66:   33:    return gcd(b, a % b);
        -:   34:  }
        -:   35:}
        -:   36:
       26:   37:int MyMath::lcm(int a, int b) {
       26:   38:  if (a < 0 || b < 0) {
        6:   39:    throw std::invalid_argument("LCM is not defined for negative numbers.");
        -:   40:  }
       20:   41:  if (a == 0 || b == 0) {
        8:   42:    return 0;
        -:   43:  } else {
       12:   44:    return (a * b) / gcd(a, b);
        -:   45:  }
        -:   46:}
        -:   47:
       22:   48:std::vector<int> MyMath::prime_factors(int n) {
       22:   49:  if (n <= 1) {
        8:   50:    throw std::invalid_argument("Prime factorization is not defined for numbers less than or equal to 1.");
        -:   51:  }
       14:   52:  std::vector<int> factors;
       54:   53:  for (int i = 2; i * i <= n; ++i) {
       80:   54:    while (n % i == 0) {
       40:   55:      factors.push_back(i);
       40:   56:      n /= i;
        -:   57:    }
        -:   58:  }
       14:   59:  if (n > 1) {
        8:   60:    factors.push_back(n);
        -:   61:  }
       14:   62:  return factors;}
        -:   63:
       14:   64:double MyMath::calculate_pi(int num_iterations) {
       14:   65:  if (num_iterations <= 0) {
        6:   66:    throw std::invalid_argument("Number of iterations must be greater than 0.");
        -:   67:  }
        8:   68:  double sum = 0.0;
      610:   69:  for (int i = 0; i < num_iterations; ++i) {
      602:   70:    double term = pow(-1, i) / (2 * i + 1);
      602:   71:    sum += term;
        -:   72:  }
        8:   73:  return 4 * sum; 
        -:   74:}
        -:   75:
       18:   76:double MyMath::sigmoid(double x) {
       18:   77:  return 1.0 / (1.0 + exp(-x));
        -:   78:}
        -:   79:
       14:   80:double MyMath::relu(double x) {
       14:   81:  return std::max(0.0, x);
        -:   82:}
        -:   83:
       12:   84:double MyMath::mean_squared_error(const std::vector<double>& y_true,
        -:   85:                                  const std::vector<double>& y_pred) {
       12:   86:  if (y_true.size() != y_pred.size()) {
        8:   87:    throw std::invalid_argument("y_true and y_pred must have the same size.");
        -:   88:  }
        -:   89:
        4:   90:  double sum_squared_errors = 0.0;
       10:   91:  for (size_t i = 0; i < y_true.size(); ++i) {
        6:   92:    double error = y_true[i] - y_pred[i];
        6:   93:    sum_squared_errors += error * error;
        -:   94:  }
        -:   95:
        4:   96:  return sum_squared_errors / y_true.size();
        -:   97:}
